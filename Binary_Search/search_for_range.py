#!/usr/bin/env python3
# coding: utf-8
import unittest


class Solution:
    @staticmethod
    def searchRange(A, B):
        """
        Time complexity: O(lgn)
        """
        if len(A) == 0 or A[0] > B or A[-1] < B:
            return [-1, -1]

        if A[0] == B and A[-1] == B:
            return [0, len(A) - 1]

        ret = []

        # left
        lo, hi = 0, len(A) - 1
        while lo <= hi:
            mid = lo + (hi - lo) // 2
            # We reached the leftmost value
            if A[mid] == B and (mid == 0 or A[mid-1] < B):
                ret.append(mid)
                break
            elif A[mid] == B or A[mid] > B:
                hi = mid - 1
            else:
                lo = mid + 1

        if len(ret) == 0:
            return [-1, -1]

        # search for right
        lo, hi = 0, len(A) - 1
        while lo <= hi:
            mid = lo + (hi - lo) // 2
            # We reached the leftmost value
            if A[mid] == B and ((mid == len(A) - 1) or A[mid+1] > B):
                ret.append(mid)
                break
            elif A[mid] == B or A[mid] < B:
                lo = mid + 1
            else:
                hi = mid - 1

        return ret


class TestSolution(unittest.TestCase):
    def setUp(self):
        self.test_cases = [
            (([5, 7, 7, 8, 8, 8, 8, 9, 10], 8), [3, 6]),
            (([5, 7, 7, 8, 8, 10], 8), [3, 4]),
            (([1, 2, 3, 4, 5, 6], 8), [-1, -1]),
            (([1, 3, 5, 7, 9, 11], 8), [-1, -1]),
            (([8, 8, 8, 8, 8, 8, 8], 8), [0, 6]),
            (([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], 3), [8, 11]),
            (([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10], 3), [98, 140])
        ]

    def test_searchRange(self):
        for i, e in self.test_cases:
            self.assertEqual(Solution.searchRange(*i), e)


if __name__ == '__main__':
    unittest.main(verbosity=2)

